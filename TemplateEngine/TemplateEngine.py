import os
import yaml

from TemplateEngine.TemplateBuilder import TemplateBuilder


class TemplateEngine:
    templates = {}
    template_path = None
    config_path = None

    @staticmethod
    def generate(environment, template_root='template', config_root='config'):
        """
        Generate CloudFormation Template

        :type config_root: str
        :param config_root: The base path under which the configuration files are located

        :type template_root: str
        :param template_root: The base path under which templates are located

        :type environment: str
        :param environment: The name of the environment to build

        :return:
        """
        TemplateEngine.config_path = config_root
        TemplateEngine.template_path = template_root

        yaml_stack_config = {'environment': environment}
        yaml_resource_configs = {}
        yaml_resource_templates = {}

        # Load configuration files
        path = '{config_path}/{environment_name}'.format(
            config_path=config_root,
            environment_name=environment
        )

        # Load all YAML files
        for root, directories, files in os.walk(path):
            for file in files:
                if file.lower().endswith('.yaml') or file.lower().endswith('.yml'):
                    filename = os.path.join(root, file)

                    # Read the YAML
                    file = open(filename, 'rt')
                    yaml_content = yaml.full_load(file)
                    file.close()

                    # Extract the configuration blocks from the YAML
                    for key, value in yaml_content.items():
                        if key == 'render':
                            # Render block found
                            for resource_id, resource in value.items():
                                if 'template' not in resource:
                                    print('ERROR: Resource does not define expected template key')
                                    exit(1)
                                yaml_resource_templates[resource_id] = TemplateEngine.load_template_file(
                                    resource['template'])
                                yaml_resource_configs[resource_id] = resource
                        elif key == 'config':
                            # Stack configuration found
                            yaml_stack_config.update(value)

        return TemplateEngine.create_cloudformation_template(
            stack_config=yaml_stack_config,
            resource_configs=yaml_resource_configs,
            resource_templates=yaml_resource_templates
        )

    @staticmethod
    def create_cloudformation_template(stack_config, resource_configs, resource_templates) -> str:
        """
        Create the final CloudFormation template output

        :type stack_config: dict
        :param stack_config: Dictionary containing the stack configuration

        :type resource_configs: dict
        :param resource_configs: Dictionary containing the YAML configuration data for each template

        :type resource_templates: dict
        :param resource_templates: Dictionary containing each of the resource templates we need to render

        :return: The complete built CloudFormation template
        """
        output_file = ''
        output_file += TemplateEngine.create_file_header(stack_config)
        output_file += TemplateEngine.create_file_resources(stack_config, resource_configs, resource_templates)

        return output_file

    @staticmethod
    def create_file_header(stack_config) -> str:
        """
        Create the CloudFormation files header section

        :type stack_config: dict
        :param stack_config: Dictionary containing the stack configuration

        :return: The header section of the CloudFormation template
        """
        if 'description' in stack_config:
            config_description = stack_config['description'].replace('"', '\\"')
        else:
            config_description = 'CloudFormation template generated by TemplateEngine'

        file_output = 'AWSTemplateFormatVersion: "2010-09-09"\n'
        file_output += 'Description: "{config_description}"\n'.format(config_description=config_description)
        file_output += '\n'

        return file_output

    @staticmethod
    def create_file_resources(stack_config, resource_configs, resource_templates) -> str:
        """
        Create the CloudFormation files resources section

        :type stack_config: dict
        :param stack_config: Dictionary containing the stack configuration

        :type resource_configs: dict
        :param resource_configs: Dictionary containing the YAML configuration data for each template
        
        :type resource_templates: dict
        :param resource_templates: Dictionary containing each of the resource templates we need to render

        :return: The resources section of the CloudFormation template
        """
        cloudformation_resources = []

        for resource_id, resource_config in resource_configs.items():
            data = stack_config
            data.update({
                'resource_id': resource_id,
                'this': resource_config,
                'config': stack_config,
                'environment': stack_config['environment']
            })

            cloudformation_resources.append(TemplateBuilder.template_render(
                content=resource_templates[resource_id],
                data=data
            ))

        file_output = 'Resources:\n'

        for cloudformation_resource in cloudformation_resources:
            lines = cloudformation_resource.split('\n')

            for line in lines:
                if len(line.strip()) > 0:
                    file_output += '    {line}\n'.format(line=line.rstrip().replace('\t', '    '))

            file_output += '\n'

        return file_output

    @staticmethod
    def load_template_file(filename) -> str:
        """
        Load Jinja2 template file from disk

        :type filename: str
        :param filename: The filename of the template to be loaded (relative to the /templates/ path)

        :return: The content of the content
        """
        # Make sure the template is relative to the template folder and ends with a '.j2' extension
        filename = TemplateEngine.template_path + '/' + filename.lstrip('/')

        if filename.endswith('.j2') is False:
            filename += '.j2'

        # Make sure the template exists
        if os.path.exists(filename) is False:
            print('ERROR: Could not locate template ({filename})'.format(filename=filename))
            exit(1)

        # Read the file and return its content
        file_object = open(filename, 'rt')
        template_content = file_object.read()
        file_object.close()

        return template_content
